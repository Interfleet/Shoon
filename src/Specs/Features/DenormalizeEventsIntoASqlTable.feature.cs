// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Denormalize events into a SQL Table")]
    public partial class DenormalizeEventsIntoASQLTableFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DenormalizeEventsIntoASqlTable.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Denormalize events into a SQL Table", "In order to easily turn events into view\r\nAs a Simple CQRS developer\r\nI want to u" +
                    "se a denormalizer that automates much of the denormalizing work for me", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new object in the table")]
        public virtual void CreateANewObjectInTheTable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new object in the table", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("the product view model table is empty");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "AggregateRootId",
                        "09887969-1F86-47A0-BB47-57722D2DF892"});
            table1.AddRow(new string[] {
                        "Sku",
                        "testsku"});
#line 8
 testRunner.When("a product is created with the following data", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AggregateRootId",
                        "Sku"});
            table2.AddRow(new string[] {
                        "09887969-1F86-47A0-BB47-57722D2DF892",
                        "testsku"});
#line 12
 testRunner.Then("the following product view models should exist in the Product table", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and update")]
        public virtual void CreateAndUpdate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and update", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("the product view model table is empty");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "AggregateRootId",
                        "4B4FCB75-BC7C-459F-AC1B-EFDA8C0CBFBE"});
            table3.AddRow(new string[] {
                        "Sku",
                        "SKU #1"});
#line 18
 testRunner.When("a product is created with the following data", ((string)(null)), table3);
#line 22
 testRunner.And("the name of the product \'4B4FCB75-BC7C-459F-AC1B-EFDA8C0CBFBE\' is set to \'Applesa" +
                    "uce Cleaner\'");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "AggregateRootId",
                        "Sku",
                        "Name"});
            table4.AddRow(new string[] {
                        "4B4FCB75-BC7C-459F-AC1B-EFDA8C0CBFBE",
                        "SKU #1",
                        "Applesauce Cleaner"});
#line 23
 testRunner.Then("the following product view models should exist in the Product table", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Upsert when no previous record exists")]
        public virtual void UpsertWhenNoPreviousRecordExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upsert when no previous record exists", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("the product view model table is empty");
#line 29
 testRunner.When("an event to set the price of product \'27BB4FC0-5058-42A2-A97A-0F9027C9F0EB\' to 4 " +
                    "without a create event");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "AggregateRootId",
                        "Sku",
                        "Name",
                        "Price"});
            table5.AddRow(new string[] {
                        "27BB4FC0-5058-42A2-A97A-0F9027C9F0EB",
                        "",
                        "",
                        "4"});
#line 30
 testRunner.Then("the following product view models should exist in the Product table", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
